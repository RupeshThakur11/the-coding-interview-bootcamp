{"componentChunkName":"component---node-modules-gatsby-theme-documentation-src-templates-doc-js","path":"/palindrome","webpackCompilationHash":"","result":{"data":{"doc":{"id":"d7c26262-1241-5e34-910b-c2b0a6f21d6a","title":"","description":null,"excerpt":"Palindrome Instructions: Given a string, return true if the string is a palindrome or false if it is\nnot. Palindromes are strings that formâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"palindrome\"\n  }, \"Palindrome\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Instructions:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Given a string, return true if the string is a palindrome or false if it is\\nnot. Palindromes are strings that form the same word if it is reversed. Do\\ninclude spaces and punctuation in determining if the string is a palindrome.\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Examples:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"palindrome(\\\"abba\\\") === true\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"palindrome(\\\"abcdefg\\\") === false\")))), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Repl.it:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"https://repl.it/@rojasleon/02-palindrome\",\n    target: \"_blank\"\n  }, \"palindrome\"))), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Code:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// first (\\uD83C\\uDF52)\\nfunction palindrome(str) {\\n  const reversed = str\\n    .split('')\\n    .reverse()\\n    .join('');\\n  return reversed === str;\\n  // should return true or false\\n}\\n\\n// Second (\\uD83C\\uDF51)\\nfunction palindrome(str) {\\n  return str.split('').every((char, i) => {\\n    return char === str[str.length - i - 1];\\n  });\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Palindrome"}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"d7c26262-1241-5e34-910b-c2b0a6f21d6a","slug":"/palindrome","previous":{"id":"6fe5be49-810b-5587-8eff-f9de0304f336","slug":"/pyramid"},"next":{"id":"82084fea-16d2-5a9d-913c-0c6875a011cb","slug":"/max-char"}}}}