{"componentChunkName":"component---node-modules-gatsby-theme-documentation-src-templates-doc-js","path":"/chunk-array","webpackCompilationHash":"","result":{"data":{"doc":{"id":"3d41c980-0758-5dd8-bbdd-4d4869046174","title":"","description":null,"excerpt":"Chunk Array Instructions: Given an array and chunk size, divide the array into many subarrays where each\nsubarray is of length size Examplesâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"chunk-array\"\n  }, \"Chunk Array\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Instructions:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Given an array and chunk size, divide the array into many subarrays where each\\nsubarray is of length size\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Examples:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"chunk([1, 2, 3, 4], 2) --> [[ 1, 2], [3, 4]]\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"chunk([1, 2, 3, 4, 5], 2) --> [[ 1, 2], [3, 4], [5]]\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"chunk([1, 2, 3, 4, 5, 6, 7, 8], 3) --> [[ 1, 2, 3], [4, 5, 6], [7, 8]]\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"chunk([1, 2, 3, 4, 5], 4) --> [[ 1, 2, 3, 4], [5]]\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"chunk([1, 2, 3, 4, 5], 10) --> [[ 1, 2, 3, 4, 5]]\"))), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Repl.it:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"https://repl.it/@rojasleon/06-chunk-array\",\n    target: \"_blank\"\n  }, \"chunk-array\"))), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Code:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// First (\\uD83C\\uDF4C)\\nfunction chunk(array, size) {\\n  const chunked = [];\\n\\n  for (element of array) {\\n    const last = chunked[chunked.length - 1];\\n\\n    if (!last || last.length === size) {\\n      chunked.push([element]);\\n    } else {\\n      last.push(element);\\n    }\\n  }\\n  return chunked;\\n}\\n\\n// Second (\\uD83C\\uDF49)\\n\\nfunction chunk(array, size) {\\n  const chunked = [];\\n  let index = 0;\\n\\n  while (index < array.length) {\\n    chunked.push(array.slice(index, index + size));\\n    index += size;\\n  }\\n  return chunked;\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Chunk Array"}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"3d41c980-0758-5dd8-bbdd-4d4869046174","slug":"/chunk-array","previous":{"id":"ea9ed13c-8517-5a71-9ed9-2ea72c1c7c80","slug":"/fizz-buzz"},"next":{"id":"1fa4b762-03d5-5da2-9574-1be46f72990d","slug":"/capitalize"}}}}