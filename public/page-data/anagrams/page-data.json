{"componentChunkName":"component---node-modules-gatsby-theme-documentation-src-templates-doc-js","path":"/anagrams","webpackCompilationHash":"","result":{"data":{"doc":{"id":"a5402859-9ebc-500c-a995-003c80ebba32","title":"","description":null,"excerpt":"Anagrams Instructions: Check to see if two provided strings are anagrams of eachother. One string is\nan anagram of another if it uses theâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"anagrams\"\n  }, \"Anagrams\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Instructions:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Check to see if two provided strings are anagrams of eachother. One string is\\nan anagram of another if it uses the same characters in the same quantity.\\nOnly consider characters, not spaces or punctuation. Consider capital letters\\nto be the same as lower case\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Examples:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"anagrams('rail safety', 'fairy tales') --> True\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"anagrams('RAIL! SAFETY!', 'fairy tales') --> True\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"anagrams('Hi there', 'Bye there') --> False\"))), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Repl.it:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"https://repl.it/@rojasleon/07-anagrams\",\n    target: \"_blank\"\n  }, \"anagrams\"))), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Code:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// First (\\uD83E\\uDD65)\\nfunction anagrams(stringA, stringB) {\\n  const aCharMap = buildCharMap(stringA);\\n  const bCharMap = buildCharMap(stringB);\\n\\n  if (Object.keys(aCharMap).length !== Object.keys(bCharMap).length) {\\n    // We don't have an anagram\\n    return false;\\n  }\\n\\n  for (let char in aCharMap) {\\n    if (aCharMap[char] !== bCharMap[char]) {\\n      // We don't have an anagram\\n      return false;\\n    }\\n  }\\n  // We got it\\n  return true;\\n}\\nfunction buildCharMap(str) {\\n  const charMap = {};\\n\\n  for (let char of str.replace(/[^\\\\w]/g, '').toLowerCase()) {\\n    charMap[char] = charMap[char] + 1 || 1;\\n  }\\n  return charMap;\\n}\\n\\n// Second (\\uD83E\\uDD5D)\\n\\nfunction cleanString(str) {\\n  return str\\n    .replace(/[^\\\\w]/g, '')\\n    .toLowerCase()\\n    .split('')\\n    .sort()\\n    .join('');\\n}\\n\\nfunction anagrams(stringA, stringB) {\\n  return cleanString(stringA) === cleanString(stringB);\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Anagrams"}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"a5402859-9ebc-500c-a995-003c80ebba32","slug":"/anagrams","previous":{"id":"1fa4b762-03d5-5da2-9574-1be46f72990d","slug":"/capitalize"},"next":null}}}