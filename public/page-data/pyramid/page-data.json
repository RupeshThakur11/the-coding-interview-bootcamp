{"componentChunkName":"component---node-modules-gatsby-theme-documentation-src-templates-doc-js","path":"/pyramid","webpackCompilationHash":"","result":{"data":{"doc":{"id":"6fe5be49-810b-5587-8eff-f9de0304f336","title":"","description":null,"excerpt":"Pyramid Instructions: Write a function that accepts a positive number N. The function should console\nlog a pyramid shape with N levels usingâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"pyramid\"\n  }, \"Pyramid\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Instructions:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Write a function that accepts a positive number N. The function should console\\nlog a pyramid shape with N levels using the # character. Make sure the pyramid\\nhas spaces on both the left \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"and\"), \" right hand sides\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Examples:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"pyramid(1)\\n  '#'\\npyramid(2)\\n  ' # '\\n  '###'\\npyramid(3)\\n  '  #  '\\n  ' ### '\\n  '#####'\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Repl.it:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"https://repl.it/@rojasleon/10-pyramid\",\n    target: \"_blank\"\n  }, \"pyramid\"))), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Code:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// First (\\uD83E\\uDD66)\\n\\nfunction pyramid(n) {\\n  const midpoint = Math.floor((2 * n - 1) / 2);\\n\\n  for (let row = 0; row < n; row++) {\\n    let level = '';\\n\\n    for (let column = 0; column < 2 * n - 1; column++) {\\n      if (midpoint - row <= column && midpoint + row >= column) {\\n        level += '#';\\n      } else {\\n        level += ' ';\\n      }\\n    }\\n    console.log(level);\\n  }\\n}\\n\\n// Second (\\uD83E\\uDD52)\\n\\nfunction pyramid(n, row = 0, level = '') {\\n  if (row === n) {\\n    return;\\n  }\\n\\n  if (level.length === 2 * n - 1) {\\n    console.log(level);\\n    return pyramid(n, row + 1);\\n  }\\n\\n  const midpoint = Math.floor((2 * n - 1) / 2);\\n\\n  let add;\\n  if (midpoint - row <= level.length && midpoint + row >= level.length) {\\n    add = '#';\\n  } else {\\n    add = ' ';\\n  }\\n  pyramid(n, row, level + add);\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Pyramid"}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"6fe5be49-810b-5587-8eff-f9de0304f336","slug":"/pyramid","previous":{"id":"de142a9e-60b7-569e-81fd-258f334fd122","slug":"/"},"next":{"id":"d7c26262-1241-5e34-910b-c2b0a6f21d6a","slug":"/palindrome"}}}}