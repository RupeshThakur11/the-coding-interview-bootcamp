{"componentChunkName":"component---node-modules-gatsby-theme-documentation-src-templates-doc-js","path":"/matrix","webpackCompilationHash":"","result":{"data":{"doc":{"id":"748138dc-d825-5a64-9558-8c24e7510811","title":"","description":null,"excerpt":"Matrix Instructions: Write a function that accepts an integer N and returns a NxN spiral matrix. Examples: Repl.it: Code:","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"matrix\"\n  }, \"Matrix\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Instructions:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Write a function that accepts an integer N and returns a NxN spiral matrix.\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Examples:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-shell\"\n  }), \"matrix(2)\\n[[1, 2],\\n[4, 3]]\\n\\nmatrix(3)\\n[[1, 2, 3],\\n[8, 9, 4],\\n[7, 6, 5]]\\n\\nmatrix(4)\\n[[1, 2, 3, 4],\\n[12, 13, 14, 5],\\n[11, 16, 15, 6],\\n[10, 9, 8, 7]]\\n\")), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Repl.it:\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"https://repl.it/@rojasleon/12-matrix\",\n    target: \"_blank\"\n  }, \"matrix\"))), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Code:\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function matrix(n) {\\n  const results = [];\\n\\n  for (let i = 0; i < n; i++) {\\n    results.push([]);\\n  }\\n\\n  let counter = 1;\\n  let startColumn = 0;\\n  let endColumn = n - 1;\\n  let startRow = 0;\\n  let endRow = n - 1;\\n  while (startColumn <= endColumn && startRow <= endRow) {\\n    // Top row\\n    for (let i = startColumn; i <= endColumn; i++) {\\n      results[startRow][i] = counter;\\n      counter++;\\n    }\\n    startRow++;\\n\\n    // Right column\\n    for (let i = startRow; i <= endRow; i++) {\\n      results[i][endColumn] = counter;\\n      counter++;\\n    }\\n    endColumn--;\\n\\n    // Bottom row\\n    for (let i = endColumn; i >= startColumn; i--) {\\n      results[endRow][i] = counter;\\n      counter++;\\n    }\\n    endRow--;\\n\\n    // start column\\n    for (let i = endRow; i >= startRow; i--) {\\n      results[i][startColumn] = counter;\\n      counter++;\\n    }\\n    startColumn++;\\n  }\\n\\n  return results;\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","headings":[{"value":"Matrix"}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"748138dc-d825-5a64-9558-8c24e7510811","slug":"/matrix","previous":{"id":"82084fea-16d2-5a9d-913c-0c6875a011cb","slug":"/max-char"},"next":{"id":"ea9ed13c-8517-5a71-9ed9-2ea72c1c7c80","slug":"/fizz-buzz"}}}}